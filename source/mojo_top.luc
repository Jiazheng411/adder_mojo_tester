module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
    
    // declare counter
    mycounter counter;
  }
}

  sig a; //adder input a
  sig b; //adder input b
  sig ci; //adder input ci
  
  sig correct_ans[2];   //correct answer for 1 bit full adder
  
  sig ans_from_adder[2]; //answer from i bit fulladder
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // manual mode when 16-19 io dip is on, read a b c from dip 0-2
    // automated mode when one or more of 16-19 is off, read a b c from io led 0 - 2
    if (&io_dip[2][3:1]){
    a = io_dip[0][0];
    b = io_dip[0][1];
    ci = io_dip[0][2];
    } else{
    a = counter.a;
    b = counter.b;
    ci = counter.ci;
    }
    
    //io led 0 - 2 display the input to adder
    io_led[0][0] = a;
    io_led[0][1] = b;
    io_led[0][2] = ci;
    
    //the correct answer with the given input for the full adder
    correct_ans = a + b + ci;
    
    //ans from 1 bit full adder, 9th io led is carry out, 8th ioled is sum
    ans_from_adder = c{io_dip[1][1], io_dip[1][0]};
    io_led[1][0] = io_dip[1][0];
    io_led[1][1] = io_dip[1][1];
    
    // io led[2] is on only when answer is correct
    io_led[2] = 8x{correct_ans == ans_from_adder};
    
    // if full adder answer is wrong, display 0000 in the seven-segment displays
    if(correct_ans != ans_from_adder){
     io_seg = 8b11000000;
     io_sel = 4b0;
    }
  }
}